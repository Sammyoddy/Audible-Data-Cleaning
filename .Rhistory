TRUE ~ as.numeric(time)
)
)
# Handle NA values (if there are cases like "2 hours" with no mins or "45 mins" with no hours)
audible$hours[is.na(audible$hours)] <- 0
audible$minutes[is.na(audible$minutes)] <- 0
#converted releasedate column of data type string to date as should be
audible$releasedate<- as.Date(audible$releasedate,format="%d-%m-%y")
#split stars column into Stars and Rating Column,remove unwanted characters and convert columns to numeric
audible <- audible %>% separate(
stars, into = c("Stars", "Rating"), sep = "out of 5 stars") %>%
mutate(
Stars = as.numeric(str_remove_all(Stars, " ")),
Rating = as.numeric(str_remove_all(Rating, ",|ratings"))
) %>%
mutate_at(
vars(Stars, Rating),
~if_else(is.na(.), 0, .)
)
audible <- audible %>% mutate(
price = case_when(
str_detect(price, ",") ~ as.numeric(str_remove(price, ",")),
str_detect(price, "Free") ~ as.numeric(str_remove(price, "Free")),
TRUE ~ as.numeric(price)
)
)
#load tidyverse package
library(tidyverse)
#read in audible csv
audible<- read_csv("C:/Users/SAMMY/Desktop/Audible/audible_uncleaned.csv")
#examine dataset
view(audible)
head(audible,10)
#author and narrator column cleaned of unwanted characters ('Writtenby:' and 'Narratedby:') respectively
#and content of the columns properly formatted
audible<-audible %>%mutate_at(vars(author,narrator),
~if_else(str_detect(.,"(Writtenby:)|(Narratedby:)"),
str_replace_all(str_remove(.,"(Writtenby:)|(Narratedby:)|\\d+"),"(?<=[a-z])(?=[A-Z])", " "),
.)
)
# Create new columns off the time column and typecast to numeric
audible <- audible %>%
mutate(
# Extract hours and minutes into separate columns
hours = as.numeric(str_extract(time, "\\d+(?=\\s*hr)")),
minutes = as.numeric(str_extract(time, "\\d+(?=\\s*min)")),
# Convert time to seconds
time_seconds = case_when(
str_detect(time, "hrs|hr") & !str_detect(time, "mins|min") ~
as.numeric(str_extract(time, "\\d+(?=\\s*hr)")) * 3600,
str_detect(time, "hrs|hr") & str_detect(time, "min|mins") ~
as.numeric(str_extract(time, "\\d+(?=\\s*hr)")) * 3600 +
as.numeric(str_extract(time, "\\d+(?=\\s*min)")) * 60,
str_detect(time, "mins|min") ~
as.numeric(str_extract(time, "\\d+")) * 60,
TRUE ~ as.numeric(time)
)
)
# Handle NA values (if there are cases like "2 hours" with no mins or "45 mins" with no hours)
audible$hours[is.na(audible$hours)] <- 0
audible$minutes[is.na(audible$minutes)] <- 0
#converted releasedate column of data type string to date as should be
audible$releasedate<- as.Date(audible$releasedate,format="%d-%m-%y")
#split stars column into Stars and Rating Column,remove unwanted characters and convert columns to numeric
audible <- audible %>% separate(
stars, into = c("Stars", "Rating"), sep = "out of 5 stars") %>%
mutate(
Stars = as.numeric(str_remove_all(Stars, " ")),
Rating = as.numeric(str_remove_all(Rating, ",|ratings"))
) %>%
mutate_at(
vars(Stars, Rating),
~if_else(is.na(.), 0, .)
)
audible <- audible %>% mutate(
price = case_when(
str_detect(price, ",") ~ as.numeric(str_remove(price, ",")),
str_detect(price, "Free") ~ as.numeric(str_replace(price, "0")),
TRUE ~ as.numeric(price)
)
)
#load tidyverse package
library(tidyverse)
#read in audible csv
audible<- read_csv("C:/Users/SAMMY/Desktop/Audible/audible_uncleaned.csv")
#examine dataset
view(audible)
head(audible,10)
#author and narrator column cleaned of unwanted characters ('Writtenby:' and 'Narratedby:') respectively
#and content of the columns properly formatted
audible<-audible %>%mutate_at(vars(author,narrator),
~if_else(str_detect(.,"(Writtenby:)|(Narratedby:)"),
str_replace_all(str_remove(.,"(Writtenby:)|(Narratedby:)|\\d+"),"(?<=[a-z])(?=[A-Z])", " "),
.)
)
# Create new columns off the time column and typecast to numeric
audible <- audible %>%
mutate(
# Extract hours and minutes into separate columns
hours = as.numeric(str_extract(time, "\\d+(?=\\s*hr)")),
minutes = as.numeric(str_extract(time, "\\d+(?=\\s*min)")),
# Convert time to seconds
time_seconds = case_when(
str_detect(time, "hrs|hr") & !str_detect(time, "mins|min") ~
as.numeric(str_extract(time, "\\d+(?=\\s*hr)")) * 3600,
str_detect(time, "hrs|hr") & str_detect(time, "min|mins") ~
as.numeric(str_extract(time, "\\d+(?=\\s*hr)")) * 3600 +
as.numeric(str_extract(time, "\\d+(?=\\s*min)")) * 60,
str_detect(time, "mins|min") ~
as.numeric(str_extract(time, "\\d+")) * 60,
TRUE ~ as.numeric(time)
)
)
# Handle NA values (if there are cases like "2 hours" with no mins or "45 mins" with no hours)
audible$hours[is.na(audible$hours)] <- 0
audible$minutes[is.na(audible$minutes)] <- 0
#converted releasedate column of data type string to date as should be
audible$releasedate<- as.Date(audible$releasedate,format="%d-%m-%y")
#split stars column into Stars and Rating Column,remove unwanted characters and convert columns to numeric
audible <- audible %>% separate(
stars, into = c("Stars", "Rating"), sep = "out of 5 stars") %>%
mutate(
Stars = as.numeric(str_remove_all(Stars, " ")),
Rating = as.numeric(str_remove_all(Rating, ",|ratings"))
) %>%
mutate_at(
vars(Stars, Rating),
~if_else(is.na(.), 0, .)
)
audible <- audible %>% mutate(
price = case_when(
str_detect(price, ",") ~ as.numeric(str_remove(price, ",")),
str_detect(price, "Free") ~ as.numeric(str_replace(price, "Free")),
TRUE ~ as.numeric(price)
),price=if_else(is.na(price),0,price)
)
#load tidyverse package
library(tidyverse)
#read in audible csv
audible<- read_csv("C:/Users/SAMMY/Desktop/Audible/audible_uncleaned.csv")
#examine dataset
view(audible)
head(audible,10)
#author and narrator column cleaned of unwanted characters ('Writtenby:' and 'Narratedby:') respectively
#and content of the columns properly formatted
audible<-audible %>%mutate_at(vars(author,narrator),
~if_else(str_detect(.,"(Writtenby:)|(Narratedby:)"),
str_replace_all(str_remove(.,"(Writtenby:)|(Narratedby:)|\\d+"),"(?<=[a-z])(?=[A-Z])", " "),
.)
)
# Create new columns off the time column and typecast to numeric
audible <- audible %>%
mutate(
# Extract hours and minutes into separate columns
hours = as.numeric(str_extract(time, "\\d+(?=\\s*hr)")),
minutes = as.numeric(str_extract(time, "\\d+(?=\\s*min)")),
# Convert time to seconds
time_seconds = case_when(
str_detect(time, "hrs|hr") & !str_detect(time, "mins|min") ~
as.numeric(str_extract(time, "\\d+(?=\\s*hr)")) * 3600,
str_detect(time, "hrs|hr") & str_detect(time, "min|mins") ~
as.numeric(str_extract(time, "\\d+(?=\\s*hr)")) * 3600 +
as.numeric(str_extract(time, "\\d+(?=\\s*min)")) * 60,
str_detect(time, "mins|min") ~
as.numeric(str_extract(time, "\\d+")) * 60,
TRUE ~ as.numeric(time)
)
)
# Handle NA values (if there are cases like "2 hours" with no mins or "45 mins" with no hours)
audible$hours[is.na(audible$hours)] <- 0
audible$minutes[is.na(audible$minutes)] <- 0
#converted releasedate column of data type string to date as should be
audible$releasedate<- as.Date(audible$releasedate,format="%d-%m-%y")
#split stars column into Stars and Rating Column,remove unwanted characters and convert columns to numeric
audible <- audible %>% separate(
stars, into = c("Stars", "Rating"), sep = "out of 5 stars") %>%
mutate(
Stars = as.numeric(str_remove_all(Stars, " ")),
Rating = as.numeric(str_remove_all(Rating, ",|ratings"))
) %>%
mutate_at(
vars(Stars, Rating),
~if_else(is.na(.), 0, .)
)
audible <- audible %>% mutate(
price = case_when(
str_detect(price, ",") ~ as.numeric(str_remove(price, ",")),
str_detect(price, "Free") ~ as.numeric(str_remove(price, "Free")),
TRUE ~ as.numeric(price)
),price=if_else(is.na(price),0,price)
)
audible %>% filter(price=="Free") %>% select(price,name,author)
audible %>% filter(is.na(price)) %>% select(price,name,author)
#load tidyverse package
library(tidyverse)
#read in audible csv
audible<- read_csv("C:/Users/SAMMY/Desktop/Audible/audible_uncleaned.csv")
#examine dataset
view(audible)
head(audible,10)
#author and narrator column cleaned of unwanted characters ('Writtenby:' and 'Narratedby:') respectively
#and content of the columns properly formatted
audible<-audible %>%mutate_at(vars(author,narrator),
~if_else(str_detect(.,"(Writtenby:)|(Narratedby:)"),
str_replace_all(str_remove(.,"(Writtenby:)|(Narratedby:)|\\d+"),"(?<=[a-z])(?=[A-Z])", " "),
.)
)
# Create new columns off the time column and typecast to numeric
audible <- audible %>%
mutate(
# Extract hours and minutes into separate columns
hours = as.numeric(str_extract(time, "\\d+(?=\\s*hr)")),
minutes = as.numeric(str_extract(time, "\\d+(?=\\s*min)")),
# Convert time to seconds
time_seconds = case_when(
str_detect(time, "hrs|hr") & !str_detect(time, "mins|min") ~
as.numeric(str_extract(time, "\\d+(?=\\s*hr)")) * 3600,
str_detect(time, "hrs|hr") & str_detect(time, "min|mins") ~
as.numeric(str_extract(time, "\\d+(?=\\s*hr)")) * 3600 +
as.numeric(str_extract(time, "\\d+(?=\\s*min)")) * 60,
str_detect(time, "mins|min") ~
as.numeric(str_extract(time, "\\d+")) * 60,
TRUE ~ as.numeric(time)
)
)
# Handle NA values (if there are cases like "2 hours" with no mins or "45 mins" with no hours)
audible$hours[is.na(audible$hours)] <- 0
audible$minutes[is.na(audible$minutes)] <- 0
#converted releasedate column of data type string to date as should be
audible$releasedate<- as.Date(audible$releasedate,format="%d-%m-%y")
#split stars column into Stars and Rating Column,remove unwanted characters and convert columns to numeric
audible <- audible %>% separate(
stars, into = c("Stars", "Rating"), sep = "out of 5 stars") %>%
mutate(
Stars = as.numeric(str_remove_all(Stars, " ")),
Rating = as.numeric(str_remove_all(Rating, ",|ratings"))
) %>%
mutate_at(
vars(Stars, Rating),
~if_else(is.na(.), 0, .)
)
#Clean price column and type cast to numeric
audible <- audible %>% mutate(
price = case_when(
str_detect(price, ",") ~ as.numeric(str_remove(price, ",")),
str_detect(price, "Free") ~ as.numeric(str_remove(price, "Free")),
TRUE ~ as.numeric(price)
),price=if_else(is.na(price),0,price)
)
View(audible)
View(audible)
audible %>% names()
audible %>% str()
write.csv(audible,"C:/Users/SAMMY/Desktop/Audible/audible_cleaned.csv")
#subsetting the data
audible %>% select(name:time,hours:time_seconds,releasedate,language,Stars:price)
#load tidyverse package
library(tidyverse)
#subsetting the data
audible %>% select(name:time,hours:time_seconds,releasedate,language,Stars:price)
#saving the data
write.csv(audible,"C:/Users/SAMMY/Desktop/Audible/audible_cleaned.csv")
#saving the data
write.csv(audible,"C:/Users/SAMMY/Desktop/Audible/audible_cleaned.csv")
#subsetting the data
audible <-audible %>% select(name:time,hours:time_seconds,releasedate,language,Stars:price)
#saving the data
write.csv(audible,"C:/Users/SAMMY/Desktop/Audible/audible_cleaned.csv")
#saving the data
write.csv(audible,"C:/Users/SAMMY/Desktop/Audible/audible_cleaned.csv")
library(lubridate)
today()
today()- 2023-11-25
today()- date(2023-11-25)
camp<- as.Date(2023-11-25)
today()- camp
camp<- as.Date(2023-11-25)
camp<- as.Date("2023-11-25")
today()-camp
camp<- as.Date("2023")
camp<- as.Date("2023",%Y)
camp<- as.Date("2023","%Y")
today()-camp
library(lubridate)
today()-camp
camp<- as.Date("1996","%Y")
today()-camp
1996-2023
camp <- as.Date("2023-11-25")
today()-camp
library(lubridate)
today()-camp
library(tidyverse)
#read in audible csv
audible<- read_csv("C:/Users/SAMMY/Desktop/Audible/audible_uncleaned.csv")
#examine dataset
view(audible)
camp
audible
head(audible,10)
head(audible,20)
#load tidyverse package
library(tidyverse)
#read in audible csv
audible<- read_csv("C:/Users/SAMMY/Desktop/Audible/audible_uncleaned.csv")
#examine dataset
view(audible)
head(audible,20)
#author and narrator column cleaned of unwanted characters ('Writtenby:' and 'Narratedby:') respectively
#and content of the columns properly formatted
audible<-audible %>%mutate_at(vars(author,narrator),
~if_else(str_detect(.,"(Writtenby:)|(Narratedby:)"),
str_replace_all(str_remove(.,"(Writtenby:)|(Narratedby:)|\\d+"),"(?<=[a-z])(?=[A-Z])", " "),
.)
)
# Create new columns off the time column and typecast to numeric
audible <- audible %>%
mutate(
# Extract hours and minutes into separate columns
hours = as.numeric(str_extract(time, "\\d+(?=\\s*hr)")),
minutes = as.numeric(str_extract(time, "\\d+(?=\\s*min)")),
# Convert time to seconds
time_seconds = case_when(
str_detect(time, "hrs|hr") & !str_detect(time, "mins|min") ~
as.numeric(str_extract(time, "\\d+(?=\\s*hr)")) * 3600,
str_detect(time, "hrs|hr") & str_detect(time, "min|mins") ~
as.numeric(str_extract(time, "\\d+(?=\\s*hr)")) * 3600 +
as.numeric(str_extract(time, "\\d+(?=\\s*min)")) * 60,
str_detect(time, "mins|min") ~
as.numeric(str_extract(time, "\\d+")) * 60,
TRUE ~ as.numeric(time)
)
)
# Handle NA values (if there are cases like "2 hours" with no mins or "45 mins" with no hours)
audible$hours[is.na(audible$hours)] <- 0
audible$minutes[is.na(audible$minutes)] <- 0
#converted releasedate column of data type string to date as should be
audible$releasedate<- as.Date(audible$releasedate,format="%d-%m-%y")
#split stars column into Stars and Rating Column,remove unwanted characters and convert columns to numeric
audible <- audible %>% separate(
stars, into = c("Stars", "Rating"), sep = "out of 5 stars") %>%
mutate(
Stars = as.numeric(str_remove_all(Stars, " ")),
Rating = as.numeric(str_remove_all(Rating, ",|ratings"))
) %>%
mutate_at(
vars(Stars, Rating),
~if_else(is.na(.), 0, .)
)
#Clean price column and type cast to numeric
audible <- audible %>% mutate(
price = case_when(
str_detect(price, ",") ~ as.numeric(str_remove(price, ",")),
str_detect(price, "Free") ~ as.numeric(str_remove(price, "Free")),
TRUE ~ as.numeric(price)
),price=if_else(is.na(price),0,price)
)
#subsetting the data
audible <-audible %>% select(name:time,hours:time_seconds,releasedate,language,Stars:price)
#saving the data
write.csv(audible,"C:/Users/SAMMY/Desktop/Audible/audible_cleaned.csv")
rm(camp)
ggplot(audible, mapping = aes(x = author))
+geom_bar()
ggplot(audible, mapping = aes(x = author))+
geom_bar()
library(tidyverse)
jan<-read_csv("C:\Users\SAMMY\Desktop\Data Challenge\Sales_January_2019.csv")
jan<-read_csv("C:/Users/SAMMY/Desktop/Data Challenge/Sales_January_2019.csv")
feb<-read_csv("C:/Users/SAMMY/Desktop/Data Challenge/Sales_February_2019.csv")
mar<-read_csv("C:/Users/SAMMY/Desktop/Data Challenge/Sales_March_2019.csv")
apr<-read_csv("C:/Users/SAMMY/Desktop/Data Challenge/Sales_April_2019.csv")
may<-read_csv("C:/Users/SAMMY/Desktop/Data Challenge/Sales_May_2019.csv")
jun<-read_csv("C:/Users/SAMMY/Desktop/Data Challenge/Sales_June_2019.csv")
jul<-read_csv("C:/Users/SAMMY/Desktop/Data Challenge/Sales_July_2019.csv")
aug<-read_csv("C:/Users/SAMMY/Desktop/Data Challenge/Sales_August_2019.csv")
sept<-read_csv("C:/Users/SAMMY/Desktop/Data Challenge/Sales_September_2019.csv")
oct<-read_csv("C:/Users/SAMMY/Desktop/Data Challenge/Sales_October_2019.csv")
nov<-read_csv("C:/Users/SAMMY/Desktop/Data Challenge/Sales_November_2019.csv")
dec<-read_csv("C:/Users/SAMMY/Desktop/Data Challenge/Sales_December_2019.csv")
sales_2019<-rbind(jan,feb,mar,apr,may,jun,jul,aug,sept,oct,nov,dec)
setwd("C:/Users/SAMMY/Desktop/Data Challenge")
files<-list.files(pattern =" *.csv")
view(files)
sales_merged<-do.call(rbind, lapply(files,read.csv))
View(sales_2019)
View(sales_2019)
View(sales_merged)
View(sales_merged)
View(sales_2019)
View(sales_2019)
str(sales_2019)
str(sales_merged)
sales_2019<-sales_merged
View(sales_merged)
View(sales_merged)
View(sales_2019)
View(sales_2019)
sales_2019<-sales_2019 %>% mutate(Quantity_Ordered=as.numeric(Quantity_Ordered),
Price_Each=as.numeric(Price_Each))
dplyr::last_dplyr_warnings()
View(sales_2019)
View(sales_2019)
sales_2019 %>% select(Order_ID:Purchase_Address) %>% filter(na)
sales_2019 %>% select(Order_ID:Purchase_Address) %>% filter(!complete.cases(.))
sales_2019<-sales_2019 %>% select(Order_ID:Purchase_Address) %>% filter(complete.cases(.) & Order_ID!= "NULL")
sales_2019<-sales_2019 %>% select(Order_ID:Purchase_Address) %>% filter(complete.cases(.))
sales_2019 %>% select(Order_ID:Purchase_Address) %>% filter(complete.cases(.))
View(sales_2019)
View(sales_2019)
unique(sales_2019$Product)
unique(sales_2019$Order_ID)
View(sales_2019)
View(sales_2019)
sales_2019 %>% arrange(desc(Quantity_Ordered))%>% select(Product,Quantity_Ordered)
sales_2019 %>% group_by(Product) arrange(desc(Quantity_Ordered))%>% select(Product,Quantity_Ordered)
sales_2019 %>% group_by(Product) %>% arrange(desc(Quantity_Ordered))%>% select(Product,Quantity_Ordered)
unique(sales_2019$Product)
sales_2019 %>% select(Order_ID:Purchase_Address) %>% filter(complete.cases(.))
sales_2019 %>% select(Order_ID:Purchase_Address) %>% filter(complete.cases(.)) %>% view()
sales_2019<- sales_2019 %>%mutate(Total_Cost=Quantity_Ordered*Price_Each)
sales_2019<- sales_2019 %>%mutate(Total_Cost=Quantity_Ordered*Price_Each) %>% view()
View(sales_2019)
View(sales_2019)
sales_2019 %>%mutate(Order_ID=as.numeric(Order_ID)
)
str(sales_2019)
sales_2019 <- sales_2019 %>%
mutate(City = str_extract(Purchase_Address, "(?<=, )[A-Za-z ]+(?=, [A-Z]{2})"),
State = str_extract(Purchase_Address, "(?<=, )[A-Z]{2}(?= [0-9]{5})"))
View(sales_2019)
View(sales_2019)
sales_2019<-sales_2019 %>% mutate(Datetime_Order=as.POSIXct(sales_2019$Order_Date))
sales_2019<-sales_2019 %>% mutate(Datetime_Order=format(Order_Date,"%d-%m-%Y %H:%M:%S"))
View(sales_2019)
View(sales_2019)
sales_2019 <- sales_2019 %>%
mutate(Order_datetime = format(as.POSIXct(Order_Date, format = "%Y-%m-%d %H:%M:%S"), "%d-%m-%Y %H:%M:%S"))
View(sales_2019)
View(sales_2019)
sales_2019 <- sales_2019 %>%
mutate(Order_datetime = format(as.POSIXct(Order_Date, format = "%d-%m-%Y %H:%M:%S"), "%d-%m-%Y %H:%M:%S"))
View(sales_2019)
View(sales_2019)
sales_2019 <- sales_2019 %>%
mutate(Order_datetime = format(as.POSIXct(Order_Date, format = "%Y-%m-%d %H:%M:%S"), "%d-%m-%Y %H:%M:%S"))
View(sales_2019)
View(sales_2019)
unique(feb$Order_ID)
unique(feb$Order_Date)
unique(jan$Order_ID)
unique(jan$Order_ID) %>% view()
unique(mar$Order_ID) %>% view()
unique(mar$Order_ID)
library(tidyverse)
setwd("C:/Users/SAMMY/Desktop/Data Challenge")
files<-list.files(pattern =" *.csv")
sales_merged<-do.call(rbind, lapply(files,read.csv))
library(tidyverse)
setwd("C:/Users/SAMMY/Desktop/Data Challenge")
files<-list.files(pattern =" *.csv")
sales_2019<-do.call(rbind, lapply(files,read.csv))
sales_2019 %>% select(Order_ID:Purchase_Address) %>% filter(Order_ID="NULL")
sales_2019 %>% select(Order_ID:Purchase_Address) %>% filter(Order_ID=="NULL")
getOption("max.print")
order_idnull<-sales_2019 %>% select(Order_ID:Purchase_Address) %>% filter(Order_ID=="NULL")
write.csv(order_idnull,"orderidfil.csv")
View(sales_2019)
View(sales_2019)
sales_2019 %>% select(Order_ID:Purchase_Address) %>% filter(Order_ID=="NULL") %>% utils::View()
#Some Data Cleaning
#===================================================================================
sales_2019<-sales_2019 %>%select(Order_ID:Purchase_Address) %>% filter(sales_2019$Price_Each != "NULL")
sales_2019 %>% select(Order_ID:Purchase_Address) %>% filter(Order_ID=="NULL") %>% utils::View()
View(sales_2019)
View(sales_2019)
unique(sales_2019$Order_ID)
unique(sales_2019$Order_ID) %>% utils::View()
sales_2019 %>% select(Order_ID:Purchase_Address) %>% filter(Order_ID=="NULL")
sales_2019 %>% select(Order_ID:Purchase_Address) %>% filter(Order_ID=="NULL") %>% knitr::kable()
sales_2019 %>% select(Order_ID:Purchase_Address) %>% filter(Order_ID=="NULL") %>% utils::View()
sales_2019 %>% select(Order_ID:Purchase_Address) %>% filter(complete.cases(.))
sales_2019 %>% select(Order_ID:Purchase_Address) %>% filter(complete.cases(.)) %>% view
View()
sales_2019 %>% select(Order_ID:Purchase_Address) %>% filter(!complete.cases(.)) %>% view
library(tidyverse)
setwd("C:/Users/SAMMY/Desktop/Data Challenge")
files<-list.files(pattern =" *.csv")
sales_2019<-do.call(rbind, lapply(files,read.csv))
str(sales_2019)
unique(sales_2019$Order_ID)
View(sales_2019)
View(sales_2019)
View(sales_merged)
View(sales_merged)
View(sales_2019)
View(sales_2019)
sales_2019<-sales_2019 %>% mutate(Quantity_Ordered=as.numeric(Quantity_Ordered),
Price_Each=as.numeric(Price_Each))
sales_2019<-sales_2019 %>% mutate(Order_ID=as.numeric(Order_ID))
View(sales_2019)
View(sales_2019)
unique(sales_2019$Order_ID)
unique(sales_2019$Order_ID) %>% utils::View()
sales_2019 %>% select(Order_ID:Purchase_Address) %>% filter(is.na(Order_ID))
sales_2019 %>% select(Order_ID:Purchase_Address) %>% filter(is.na(Order_ID)) %>% utils::View()
sales_2019<- sales_2019 %>%mutate(Total_Cost=Quantity_Ordered*Price_Each)
sales_2019 <- sales_2019 %>%
mutate(City = str_extract(Purchase_Address, "(?<=, )[A-Za-z ]+(?=, [A-Z]{2})"),
State = str_extract(Purchase_Address, "(?<=, )[A-Z]{2}(?= [0-9]{5})"))
View(sales_2019)
View(sales_2019)
